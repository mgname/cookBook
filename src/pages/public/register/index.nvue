<template>
	<view class="login_wrapper">
		<b-status-bar />
		<view class="login">
			<text class="login_text">注册</text>
		</view>
		<view class="form_wrapper">
			<view class="form_top">
				<text class="form_title">用户名</text>
				<view class="form_input">
					<input type="text" placeholder="请输入用户名" class="input" v-model="formData.username" />
				</view>
				<text class="err">{{ err.username }}</text>
				<text class="form_title">密码</text>
				<view class="form_input">
					<input type="password" placeholder="请输入密码" class="input" v-model="formData.password" />
				</view>
				<text class="err">{{ err.password }}</text>
				<text class="form_title">确认密码</text>
				<view class="form_input">
					<input type="password" placeholder="请再次输入密码" class="input" v-model="formData.rePassword" />
				</view>
				<text class="err">{{ err.rePassword }}</text>
			</view>
			<view class="form_bottom">
				<!-- <view class="btn" @click="validate">
					<text class="btn_text">注册</text>
				</view> -->
				<u-button type="info" shape="circle" text="注册" class="custom-style" throttleTime=500 :loading="isLoading" loadingText="注册中" @click="validate"></u-button>
			</view>
		</view>
		<u-toast ref="uToast"></u-toast>
	</view>
</template>

<script>
import BStatusBar from '@/pages/components/BStatusBar/index.vue'
export default {
	data() {
		return {
			formData: {
				username: '',
				password: '',
				rePassword: ''
			},
			err: {
				username: ' ',
				password: ' ',
				rePassword: ' '
			},
			isLoading: false
		}
	},
	components: {
		BStatusBar
	},
	methods: {
		validate() {
			this.clearErr()
			if (!this.formData.username) {
				this.err.username = '用户名不能为空'
				console.log(this.err.username)
				return
			}
			console.log(this.err.username)
			if (!this.formData.password) {
				this.err.password = '密码不能为空'
				return
			}
			if (this.formData.password !== this.formData.rePassword) {
				this.err.rePassword = '请正确填写确认密码'
				return
			}
			this.register()
		},
		clearErr() {
			this.err.username = ' '
			this.err.password = ' '
			this.err.rePassword = ' '
		},
		async register() {
			this.isLoading = true
			const response = await uni.request({
				header: {
					'content-type': 'application/x-www-form-urlencoded'
				},
				url: 'http://192.168.1.5:8080/account/reg',
				method: 'POST',
				data: {
					name: this.formData.username,
					pwd: this.formData.password
				},
				// params: {
				// },
				success: (res) => {
					// console.log(res)
					if (res.data.code === 200) {
						this.$refs.uToast.show({
							type: 'success',
							// url: '/pages/public/login/index',
							message: "注册成功"
						})
						setTimeout(() => {
							uni.navigateBack({
								animationType: 'slide-out-right'
							})
						}, 3000)
					} else {
						return this.$refs.uToast.show({
							type: 'error',
							message: "用户名已存在"
						})
					}
				},
				fail(err) {
					return uni.showToast({
						title: '请求接口失败'
					})
				},
				complete: () => {
					this.isLoading = false
				}
			})
		}
	},
}
</script>

<style lang="scss" scoped>
.login_wrapper {
	flex: 1;
	background: #FFDD67;
	.login {
		height: 300rpx;
		align-items: center;
		justify-content: center;
		&_text {
			font-weight: 600;
			font-size: 64rpx;
			color: #000000;
		}
	}
	.form_wrapper {
		background: #FFFFFF;
		border-radius: 36rpx 36rpx 0 0;
		flex: 1;
		align-items: center;
		.form_top {
			padding-top: 98rpx;
			flex: 2;
			.form_title {
				font-weight: 600;
				font-size: 40rpx;
				line-height: 48rpx;
				color: #000000;
				margin-bottom: 24rpx;
			}
			.form_input {
				// height: 100rpx;
				width: 566rpx;
				background: rgba(246, 188, 18, 0.2);
				border-radius: 8rpx;
				.input {
					padding-left: 20rpx;
					font-size: 32rpx;
					height: 100rpx;
				}
			}
			.err {
				height: 64rpx;
				font-size: 32rpx;
				color: #e74848;
			}
		}
		.form_bottom {
			flex: 1;
			justify-content: center;
			align-items: center;
			.btn {
				width: 566rpx;
				height: 96rpx;
				background-color: #FFDD67;
				border-radius: 55rpx;
				justify-content: center;
				align-items: center;
				margin-bottom: 62rpx;
				&_text {
					font-weight: 600;
					font-size: 40rpx;
					line-height: 48rpx;
					color: #000000;
				}
			}
			.register {
				flex-direction: row;
				&_text {
					font-weight: 600;
					font-size: 40rpx;
					line-height: 48rpx;
					color: #000000;
				}
				&_btn {
					font-weight: 600;
					font-size: 40rpx;
					line-height: 48rpx;
					color: #7B61FF;
				}
			}
		}
	}
}
.custom-style {
	width: 566rpx;
	height: 96rpx;
	font-size: 40rpx;
	background-color: #FFDD67;
	margin-bottom: 62rpx;
}
</style>