<template>
	<view class="content">
		<image class="bg" src="@/static/imgs/bg2.png" mode="aspectFill"></image>
		<b-status-bar />
		<text class="today_eat">今天吃</text>
		<view class="random fdr">
			<text class="random_food">{{ todayEat }}</text>
			<view class="random_btn">
				<text @click="changeTodayEat">换一个</text>
			</view>
		</view>
		<template v-if="!showCard">
			<text class="custom_food">你还可以点击“+”号添加自定义菜品：</text>
			<view class="custom_wrapper fdr">
				<view class="custom" v-for="(name, index) in customNames" :key="index" @longpress="selectTitle(index)">
					<text class="custom_text">{{ name }}</text>
				</view>
			</view>
			<view class="add" @click="showCard = true">
				<text>+</text>
			</view>
		</template>
		<view class="name" v-else>
			<text class="name_title">请输入自定义菜品名称：</text>
			<input class="name_input" type="text" v-model="inputValue" />
			<view class="name_bottom fdr">
				<text class="btn" @click="cancel">取消</text>
				<text class="btn" @click="addName">添加</text>
			</view>
		</view>
		<u-modal
			:show="showTip"
			:title="tipTitle"
			:content='tipContent'
			showCancelButton
			confirmColor="#FFDD67"
			:closeOnClickOverlay="true"
			@confirm="deleteTitle"
			@cancel="showTip = false"
			@close="showTip = false">
		</u-modal>
		<u-toast ref="uToast"></u-toast>
	</view>
</template>

<script>
import BStatusBar from '@/pages/components/BStatusBar/index.vue'
import { mapMutations, mapState } from 'vuex'


export default {
	data() {
		return {
			showCard: false,
			inputValue: '',
			customNames: [],	// 用户自定义菜单标题
			titleIndex: 0,		// 选中的第几个标题
			systemNames: [],	// 系统菜单标题
			todayEat: '',
			showTip: false,
			tipTitle: '提示'
			// tipContent: '提示内容'
		}
	},
	computed: {
		...mapState('user', ['menusName', 'token']),
		tipContent() {
			return '确定要删除“' + this.customNames[this.titleIndex] + '”吗？'
		}
	},
	components: {
		BStatusBar
	},
	methods: {
		...mapMutations('user', ['SET_MENUS_NAME']),
		cancel() {
			this.showCard = false
			this.inputValue = ''
		},
		addName() {
			if (this.inputValue) {
				this.customNames.push(this.inputValue)
				this.cancel()
			}
			this.SET_MENUS_NAME(this.customNames)
		},
		selectTitle(index) {
			this.titleIndex = index
			this.showTip = true
		},
		deleteTitle() {
			this.showTip = false
			this.customNames.splice(this.titleIndex, 1)
			this.SET_MENUS_NAME(this.customNames)
		},
		async getMenusTitle() {
			const response = await uni.request({
				header: {
					'content-type': 'application/x-www-form-urlencoded',
					'token': this.token
				},
				url: 'http://192.168.1.5:8080/menus/getMenusTitle',
				method: 'GET',
				success: (res) => {
					if (res.data.code === 200) {
						this.systemNames = res.data.data
					} else {
						return this.$refs.uToast.show({
							type: 'default',
							message: "没有菜谱"
						})
					}
				},
				fail(err) {
					return uni.showToast({
						title: '请求接口失败'
					})
				}
			})
		},
changeTodayEat() {
	if (this.customNames.length >= 1) {
		// Math.floor(Math.random()*10);    // 可均衡获取 0 到 9 的随机整数。
		const timer = setInterval(() => {
			this.todayEat = this.customNames[Math.floor(Math.random()*this.customNames.length)]
		}, 50)
		setTimeout(() => {
			clearInterval(timer)
		}, 1000)
	} else {
		const timer = setInterval(() => {
			this.todayEat = this.systemNames[Math.floor(Math.random()*this.systemNames.length)].m_title
		}, 50)
		setTimeout(() => {
			clearInterval(timer)
		}, 1000)
	}
}
	},
	onLoad() {
		this.getMenusTitle()
		console.log(this.menusName)
		this.customNames = this.menusName
	}
}
</script>

<style lang="scss" scoped>
.content {
	flex: 1;
	position: relative;
	padding: 0 54rpx;
}
.bg {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
}
.today_eat {
	font-size: 72rpx;
	line-height: 94rpx;
	color: $first-title-color;
	font-weight: 700;
	margin-top: 112rpx;
}
.random {
	border-bottom: 5rpx dashed #F3F3F3;
	justify-content: space-between;
	// background-color: pink;
	align-items: center;
	padding: 50rpx 0 32rpx;
	&_food {
		height: 94rpx;
		font-size: 72rpx;
		line-height: 94rpx;
		color: #F3F3F3;
		font-weight: 700;
	}
	&_btn {
		width: 138rpx;
		height: 60rpx;
		background: #F3F3F3;
		border-radius: 24rpx;
		justify-content: center;
		align-items: center;
	}
}
.custom {
	// width: 90rpx;
	height: 50rpx;
	background-color: #F3F3F3;
	justify-content: center;
	align-items: center;
	border-radius: 12rpx;
	padding: 0 18rpx;
	margin: 0 18rpx 10rpx 0;
	&_food {
		font-weight: 700;
		font-size: 24rpx;
		line-height: 32rpx;
		margin: 40rpx 0 22rpx;
		color: $first-title-color;
	}
	&_text {
		font-size: 24rpx;
		line-height: 36rpx;
		font-weight: 700;
		color: $first-title-color;
	}
	&_wrapper {
		flex-wrap: wrap;
	}
}
.add {
	margin-top: 32rpx;
	align-self: center;
	width: 60rpx;
	height: 60rpx;
	border-radius: 50%;
	background-color: #F3F3F3;
	justify-content: center;
	align-items: center;
}
.name {
	padding: 34rpx 34rpx 0;
	background: #FFFFFF;
	border-radius: 36rpx;
	margin-top: 20rpx;
	&_title {
		font-weight: 700;
		font-size: 24rpx;
		line-height: 32rpx;
		color: $first-title-color;
		margin-bottom: 26rpx;
	}
	&_input {
		height: 94rpx;
		background: rgba(246, 188, 18, 0.2);
		border-radius: 8rpx;
	}
}
.btn {
	flex: 1;
	font-weight: 800;
	text-align: center;
	font-size: 36rpx;
	line-height: 108rpx;
	color: $first-title-color;
}
.fdr {
	flex-direction: row;
}
</style>
